clear all
close all
%---------------------------------------------------------------------------
% This script runs the steps of "Contrast Manager" and
% "Results Report" using pre-processed data generated by "preproc_func.m"

% enter information about the image dataset and design matrix before
% running the script

%---------------------------------------------------------------------------
%---------------------------------------------------------------------------
% BEGIN USER INPUT

% enter directory and filename of input file(s)
directname = '/Users/michaeltang/Downloads/fmri_project/sub41';
filename_spm = 'SPM.mat';   % name of spm.mat file (the GLM)

% enter directory and filename of onset times matrix
directnamemat = '/Users/michaeltang/Downloads/fmri_project/sub41/matrices';
filenamemat = 'onset_times_events_sub41.mat';   % onset times matrices for all runs

% enter number of runs (num. of .nii file = % number of session(s))
numsess = 3;

% END USER INPUT
%---------------------------------------------------------------------------
%---------------------------------------------------------------------------

%---------------------------------------------------------------------------
% PART (I): PRELIMINARY

%----------------------------------
% (IC): definition of events and associated onset times

% load onset times array
terms = load(fullfile(directnamemat, filenamemat)); 

% if no onset times are recorded for an event, an empty matrix is assigned
% select non-empty entries from term struct. array, get following variables
% (i) number of conditions in each run and the total
% (ii) def. each event (str) identified in each run
% (iii) def. of each event (i.e. in matrix) identified in each run
% (iv) onset times of each evenet identified in each run
numcond = cell(1, numsess);   % initialize number of conditions cell array
numcond_est = 0;   % number of conditions established
event_def_str = cell(1, numsess);   % initialize event_def_str cell array
event_def = cell(1, numsess);   % initialize event_def cell array
evti = cell(1, numsess);   % intialize evti cell array
for i = 1:numsess   
    % for specific run
    fieldname_run = sprintf('run%d', i);
    
    % get non-empty event def. and onset times (evti)
    numcond{i} = terms.terms.(fieldname_run).results.num_cond;
    numcond_est = numcond_est + terms.terms.(fieldname_run).results.num_cond;
    event_def_str{i} = terms.terms.(fieldname_run).results.event_def_str;
    event_def{i} = terms.terms.(fieldname_run).results.event_def;
    evti{i} = terms.terms.(fieldname_run).results.evti;
end

% END (IC): definition of events and associated onset times
%----------------------------------
% (ID): create contrast matrix and name of each contrast

% create contrast matrix:

% create cond_mat for storing contrasts for each condition in each run
cont_mat = diag(ones(1, numcond_est));   % assign 1s along main diagonal 

% identify unique events in all runs

% initialize array with the first entry of event_def in the first run
uni_event_def{1} = event_def{1}{1};

% scan through each entry of event_def (A) and compare with each existing entry
% in uni_event_def (B), if A is not in B, add A to B
for runind = 1:numel(event_def)   % for each run in event_def
    for i = 1:numel(event_def{runind})   % for each entry in that run in event_def
        count = 0;   % initialize count as 0
        for item = 1:numel(uni_event_def)   % for each item in uni_event_def
            % check if current entry in event_def equals to any item in
            % uni_event_def,
            if isequal(event_def{runind}{i}, uni_event_def{item})   
                count = count + 1;   % if so, increment count by 1
            end
        end
        % if count remains 0 after going through each item in
        % uni_event_def (i.e. not in it), add current event_def to array
        if count == 0   
            uni_event_def = [uni_event_def event_def{runind}{i}];
        end
    end
end

% create event_def_all storing all event types identified in all runs
event_def_all = {};
for i = 1:numel(event_def)
    event_def_all = [event_def_all event_def{i}];
end

% create condition matrix: 
% use the unique event_def{i} for comparing with other cells in
% event_def_all, get indices of duplicate entries
for i = 1:numel(uni_event_def)   % for each item in uni_event_def
    indreq = [];   % indices required
    for j = 1:numel(event_def_all)   % for each entry in event_def_all
        if isequal(uni_event_def{i}, event_def_all{j})   % compare entries
            indreq = [indreq j];   % if yes, add index to indreq
        end
    end
    % after looping through all entries in event_def_all to search for
    % matching entries with values equal to the i^th element in uni_event_def
    arreq = zeros(1, numcond_est);   % create array of 0s, array required
    arreq(indreq) = 1;   % assign value of 1 at indices found earlier
    
    % concatenate cont_mat and arreq vertically 
    cont_mat = [cont_mat; arreq];
end

%-----------------------
% create name of each contrast:

% create cont_name_str for storing string of each condition established,
% by going through each cell of event_def_str, take transpose, and add it to array
cont_name_str = cell(size(cont_mat, 1), 1);   % preallocating memory
rownum = 1;
for i = 1:numsess   % for each run
    rowspan = length(event_def_str{i}');   % get row span
    % fitting the i^th entry of event_def_str to cont_name_str
    cont_name_str(rownum:rownum + rowspan - 1) = event_def_str{i}';  
    % increment rownum by sum of current rownum and rowspan
    % for storing the next string in the row below
    rownum = rownum + rowspan;   
end

% then appened condition names to cont_name_str for each unique condition 
% applied to all runs
% e.g. type(s)_1_21_run123, denotes event types 1 and 21 in run 1, 2, and 3

for i = 1:numel(uni_event_def)
    rownum = numcond_est + i;   % for remaining rows, numcond_est is total num. of conditions
    currlen = length(uni_event_def{i});   % get length of current item in uni_event_def
    placestr = repmat('%d_', 1, currlen);   % prepare place holder for formatting event_type
    runstr = 'all';   % prepare place holder for run numbers
%     runstr = repmat('%d', 1, numsess);   % prepare place holder for run numbers
    runnum = 1:1:numsess;   % get total number of runs
    cont_name_str{rownum} = append('type(s)_', sprintf(placestr, uni_event_def{i}), ...
        'run_', sprintf(runstr, runnum));   % assemble name of contrasts
end

% END (ID): create contrast matrix and name of each contrast

% % END PART (I): PRELIMINARY
% %---------------------------------------------------------------------------

% PART (II): SPM script

%-------------------------------------------------
% initialize spm module without graphical interface
spm('defaults','fmri');
spm_jobman('initcfg');
%-------------------------------------------------
% Contrast manager:
matlabbatch{1}.spm.stats.con.spmmat = {fullfile(directname, filename_spm)};

% use loop to assign required variables (i.e. name, contrast) to matlabbatch array
for connum = 1:size(cont_mat, 1)   % through each condition established
    matlabbatch{1}.spm.stats.con.consess{connum}.tcon.name = cont_name_str{connum};
    matlabbatch{1}.spm.stats.con.consess{connum}.tcon.weights = cont_mat(connum,:);
    matlabbatch{1}.spm.stats.con.consess{connum}.tcon.sessrep = 'none';
end

matlabbatch{1}.spm.stats.con.delete = 1;

% end Contrast manager
%-------------------------------------------------
% Results report
matlabbatch{2}.spm.stats.results.spmmat = {fullfile(directname, filename_spm)};

% use loop to assign required variables to matlabbatch array, applying
% contrast to each run
for i = 1:size(cont_mat, 1)
matlabbatch{2}.spm.stats.results.conspec(i).titlestr = '';
matlabbatch{2}.spm.stats.results.conspec(i).contrasts = i;
matlabbatch{2}.spm.stats.results.conspec(i).threshdesc = 'FWE';
matlabbatch{2}.spm.stats.results.conspec(i).thresh = 0.05;
matlabbatch{2}.spm.stats.results.conspec(i).extent = 0;
matlabbatch{2}.spm.stats.results.conspec(i).conjunction = 1;
matlabbatch{2}.spm.stats.results.conspec(i).mask.none = 1;
end

matlabbatch{2}.spm.stats.results.units = 1;
matlabbatch{2}.spm.stats.results.export{1}.ps = true;

% end Result report
%-------------------------------------------------

% END PART (II): SPM script
% %-----------------------------------------------------------------------------

% % call spm_jobman to run the script above
spm_jobman('run', matlabbatch);
