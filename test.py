# -*- coding: utf-8 -*-
"""
Created on Thu Jul 22 12:14:07 2021

@author: siumichael.tang
"""

import os 
import re
import pandas as pd
import numpy as np
import nibabel as nib 

#import myfunction
from myfunction import get_path, sort_elect

#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
# BEGIN USER INPUT

# enter subject number (str)
subnum = '14';

# enter path to directory where all input files are located
directname = '/work/levan_lab/mtang/fmri_project/' + 'sub' + subnum
#directname = 'C:\\Users\\siumichael.tang\\Downloads\\fmri_project\\' + 'sub' + subnum

# format filenames of processed fmri images, explicit mask, electrode,
# motion parameters
filename_swraimg = '^swra.*\.nii$'   # processed func. images
filename_expmask = 'wEPI_bet_mask\.nii'   # explicit mask
filename_elect = subnum + '_.*Koordinaten.*\.xlsx'  # file containing mni coord. of all electrode pairs
filename_spikes = 'subject' + subnum + '_rates\.txt'   # file of spike rates
filename_motion = 'rp_.*\.txt'   # motion parameters generated by SPM in the realignment step

# enter path where ouput struct. is stored at
#fname_op = [directname, filesep, 'matrices' filesep 'reho_alff_spikes']   # direct. of output matrix
#eafilename_op = 'reho_alff_spikes.mat'   # filename of output file

# enter if output should be written to path (1 = yes, 0 = no)
op_results = 0

# END USER INPUT
#---------------------------------------------------------------------------
#---------------------------------------------------------------------------
        
# use get_path function to obtain full path of input files
swra_file_path = get_path(directname, filename_swraimg)   # swra func. images
expmask_file_path = get_path(directname, filename_expmask)   # normalized mask images
elect_file_path = get_path(directname, filename_elect)   # file containing info. about electrodes coordinates
spikes_file_path = get_path(directname, filename_spikes)   # spike rates
motion_file_path = get_path(directname, filename_motion)   # motion parameters

# load processed images
run_ind = 0;

# create instance of processed image
swra_inst = nib.load(swra_file_path[run_ind])

# use get_fdata() method to obtain the actual image
# and use attribute, header, to obtain metadata (dict)
swra_img = swra_inst.get_fdata()   # actual image data
swra_header = swra_inst.header   # metadata about the image

# create instance of explicit mask, then get exp. mask image data
expmask = nib.load(expmask_file_path[0]).get_fdata()

# load electrode coordiantes from .xlsx file into dataframe, 
# selected only first 4 columns
elect_df = pd.read_excel(elect_file_path[0], usecols = list(range(5)))

# load spike rates from .txt file into dataframe, specify ' ' delimiter
spikes_df = pd.read_csv(spikes_file_path[0], sep = ' ')

# load motion parameters from .txt file into numpy array
motion_para = np.loadtxt(motion_file_path[run_ind])

#---------------------------------------------------------------------------
# Part (I): remove motion artifacts from processed image (entire brain)

# apply element-wise multiplciation btw. explicit mask and swra images
exp_swra_img = np.zeros(swra_img.shape)   # initialize array
for t in range(swra_img.shape[-1]):   # for swra img at every instant in time
    exp_swra_img[:, :, :, t] = expmask * swra_img[:, :, :, t]   
                
# call filter_motion.m to remove motion artifacts from image
#motion_filtered_img = filter_motion(motion_file_path, exp_swra_img);

# END Part (I): remove motion artifacts from processed images
#---------------------------------------------------------------------------



#---------------------------------------------------------------------------

# Part (IV): sort electrodes by their types

# use sort_elect to sort electrode array by their types
ele_sorted = sort_elect(elect_df);

# END PART (IV): sorte electrodes by their types
#---------------------------------------------------------------------------


